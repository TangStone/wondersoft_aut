# 接口ID
dlpDocRule_insertDlpDocRules:
  # 接口基本信息
  ApiInfo:
    # 接口名称
    api_name: 文档规则新增
    # 基础URL:https://192.168.148.174:31000
    base_url: ${base_url}
    # 请求信息
    request:
      # 请求类型
      method: POST
      # 请求地址
      address: /api/dlpparam/v1/dlpDocRule/insertDlpDocRules
      # 请求头
      headers:
        Content-Type: application/x-www-form-urlencoded
        token: ${token}
  # 接口用例，填写接口发送数据、前置操作、后置操作，发送请求时将接口基本信息与接口数据组合
  ApiData:
    # 接口用例ID
    dlpDocRule_insertDlpDocRules_01:
      # 接口用例名称
      name: 新增关键字规则
      # 接口用例描述
      description: 输入正确的关键字规则配置，新增关键字规则
      # 请求信息，包括data，file
      request:
        # 请求头
        headers:
          Referer: ${base_url}/sub-app-dlpparam/dlpFileDocRule
        # 请求数据
        data:
          c_rule_type: "1"
          c_rule_name: 自动化测试关键字规则
          c_rule_content: 自动化测试,关键字
          c_creater: ${userId}
          c_note: 自动化测试关键字规则备注
          c_reverse_key: "1"
          c_reverse_content: '{"keyList":"手工测试","threshold":"1","countType":1}'
          c_traditional_match: "1"
      # 前置操作
      preProcessors:
        # 数据库操作
        database:
          - type: mysql
            sql: update `bms-general-dlpparam`.t_dlp_doc_rule tddr set c_is_remove = '1' where c_rule_name like '自动化测试关键字规则%' and c_rule_type = '1' and c_is_remove = '0'
      # 后置操作
      postProcessors:
        # 断言
        assert:
          # 状态码校验
          code: 200
          # 返回值校验
          response: { "statusCode": 0 }
    # 接口用例ID
    dlpDocRule_insertDlpDocRules_02:
      # 接口用例名称
      name: 新增正则规则
      # 接口用例描述
      description: 输入正确的正则规则配置，新增正则规则
      # 请求信息，包括data，file
      request:
        # 请求头
        headers:
          Referer: ${base_url}/sub-app-dlpparam/dlpFileDocRule
        # 请求数据
        data:
          c_rule_type: '2'
          c_rule_name: 自动化测试正则规则
          c_rule_content: (?<!(手|工))测试
          c_creater: ${userId}
          c_note: 不匹配自动化测试文本
      # 前置操作
      preProcessors:
        # 数据库操作
        database:
          - type: mysql
            sql: update `bms-general-dlpparam`.t_dlp_doc_rule tddr set c_is_remove = '1' where c_rule_name like '自动化测试正则规则%' and c_rule_type = '2' and c_is_remove = '0'
      # 后置操作
      postProcessors:
        # 断言
        assert:
          # 状态码校验
          code: 200
          # 返回值校验
          response: { "statusCode": 0 }
    # 接口用例ID
    dlpDocRule_insertDlpDocRules_03:
      # 接口用例名称
      name: 新增模糊关键字规则
      # 接口用例描述
      description: 输入正确的模糊关键字配置，新增模糊关键字规则
      # 请求信息，包括data，file
      request:
        # 请求头
        headers:
          Referer: ${base_url}/sub-app-dlpparam/dlpFileDocRule
        # 请求数据
        data:
          c_rule_type: '3'
          c_rule_name: 自动化测试模糊关键字规则
          c_fuzzy_content: 自动化测试
          c_character_space: '1'
          c_creater: ${userId}
          c_note: 模糊匹配自动化测试文本
          c_traditional_match: "1"
      # 前置操作
      preProcessors:
        # 数据库操作
        database:
          - type: mysql
            sql: update `bms-general-dlpparam`.t_dlp_doc_rule tddr set c_is_remove = '1' where c_rule_name like '自动化测试模糊关键字规则%' and c_rule_type = '3' and c_is_remove = '0'
      # 后置操作
      postProcessors:
        # 断言
        assert:
          # 状态码校验
          code: 200
          # 返回值校验
          response: { "statusCode": 0 }
    # 接口用例ID
    datadictionary_insertDlpDocRules_01:
      # 接口用例名称
      name: 新增数据字典
      # 接口用例描述
      description: 输入正确的数据字典配置，新增数据字典规则
      # 请求信息，包括data，file
      request:
        # 请求头
        headers:
          Referer: ${base_url}/sub-app-dlpparam/dlpDataDictionary
        # 请求数据
        data:
          c_rule_type: "4"
          c_rule_name: 自动化测试数据字典规则
          c_rule_content: 自动化测试,2;数据字典,1
          c_creater: ${userId}
          c_note: 自动化测试数据字典规则备注
          c_traditional_match: "1"
      # 前置操作
      preProcessors:
        # 数据库操作
        database:
          - type: mysql
            sql: update `bms-general-dlpparam`.t_dlp_doc_rule tddr set c_is_remove = '1' where c_rule_name like '自动化测试数据字典规则%' and c_rule_type = '4' and c_is_remove = '0'
      # 后置操作
      postProcessors:
        # 断言
        assert:
          # 状态码校验
          code: 200
          # 返回值校验
          response: { "statusCode": 0 }