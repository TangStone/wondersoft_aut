{"uid":"ea3c15a99606fa17","name":"新增关键字规则-规则详情中包含中文逗号","fullName":"test_cases.step_defs.bms.test_13_dlp_doc_rules#test_新增关键字规则规则详情中包含中文逗号","historyId":"4fb3665a2061bc6a879190e7020488b5","time":{"start":1718085222782,"stop":1718085259237,"duration":36455},"description":"E:\\Wondersoft_WebUITest\\test_cases\\features\\bms\\dlp_doc_rules.feature: 新增关键字规则-规则详情中包含中文逗号","descriptionHtml":"<p>E:\\Wondersoft_WebUITest\\test_cases\\features\\bms\\dlp_doc_rules.feature: 新增关键字规则-规则详情中包含中文逗号</p>\n","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <pages.common_page.CommonPage object at 0x0000029FFCC038E0>, dialog_expect_msg = '该关键字规则中包含中文逗号或特殊字符，请确认是否进行提交？'\n\n    @allure.step(\"校验--弹出对话提示框，显示提示信息：{dialog_expect_msg}\")\n    def assert_dialog_msg(self, dialog_expect_msg=\"\"):\n        \"\"\"\n        校验是否弹出对话提示框，提示框\n        :param dialog_expect_msg: 预期提示信息\n        :return:\n        \"\"\"\n        logger.info(f\"校验是否弹出对话提示框，对话提示框提示信息为：{dialog_expect_msg}，提示信息为空表示不校验提示信息\")\n        try:\n            # 等待提示框出现\n>           dialog_location = self.wait_for_selector('[role=\"dialog\"][aria-label=\"提示\"]')\n\npages\\common_page.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.common_page.CommonPage object at 0x0000029FFCC038E0>, selector = '[role=\"dialog\"][aria-label=\"提示\"]'\n\n    def wait_for_selector(self, selector: str):\n        \"\"\"\n        等待元素出现\n        :param selector: 元素选择器\n        :return:\n        \"\"\"\n        logger.info(f\"等待元素：{selector}\")\n>       return self.page.wait_for_selector(selector, strict=True)\n\nutils\\ui_utils\\base_page.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Page url='https://192.168.150.227:31000/sub-app-dlpparam/dlpFileDocRule'>, selector = '[role=\"dialog\"][aria-label=\"提示\"]'\n\n    def wait_for_selector(\n        self,\n        selector: str,\n        *,\n        timeout: typing.Optional[float] = None,\n        state: typing.Optional[\n            Literal[\"attached\", \"detached\", \"hidden\", \"visible\"]\n        ] = None,\n        strict: typing.Optional[bool] = None\n    ) -> typing.Optional[\"ElementHandle\"]:\n        \"\"\"Page.wait_for_selector\n    \n        Returns when element specified by selector satisfies `state` option. Returns `null` if waiting for `hidden` or\n        `detached`.\n    \n        **NOTE** Playwright automatically waits for element to be ready before performing an action. Using `Locator`\n        objects and web-first assertions makes the code wait-for-selector-free.\n    \n        Wait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If\n        at the moment of calling the method `selector` already satisfies the condition, the method will return immediately.\n        If the selector doesn't satisfy the condition for the `timeout` milliseconds, the function will throw.\n    \n        **Usage**\n    \n        This method works across navigations:\n    \n        ```py\n        from playwright.sync_api import sync_playwright, Playwright\n    \n        def run(playwright: Playwright):\n            chromium = playwright.chromium\n            browser = chromium.launch()\n            page = browser.new_page()\n            for current_url in [\\\"https://google.com\\\", \\\"https://bbc.com\\\"]:\n                page.goto(current_url, wait_until=\\\"domcontentloaded\\\")\n                element = page.wait_for_selector(\\\"img\\\")\n                print(\\\"Loaded image: \\\" + str(element.get_attribute(\\\"src\\\")))\n            browser.close()\n    \n        with sync_playwright() as playwright:\n            run(playwright)\n        ```\n    \n        Parameters\n        ----------\n        selector : str\n            A selector to query for.\n        timeout : Union[float, None]\n            Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can\n            be changed by using the `browser_context.set_default_timeout()` or `page.set_default_timeout()` methods.\n        state : Union[\"attached\", \"detached\", \"hidden\", \"visible\", None]\n            Defaults to `'visible'`. Can be either:\n            - `'attached'` - wait for element to be present in DOM.\n            - `'detached'` - wait for element to not be present in DOM.\n            - `'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element\n              without any content or with `display:none` has an empty bounding box and is not considered visible.\n            - `'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or\n              `visibility:hidden`. This is opposite to the `'visible'` option.\n        strict : Union[bool, None]\n            When true, the call requires selector to resolve to a single element. If given selector resolves to more than one\n            element, the call throws an exception.\n    \n        Returns\n        -------\n        Union[ElementHandle, None]\n        \"\"\"\n    \n        return mapping.from_impl_nullable(\n>           self._sync(\n                self._impl_obj.wait_for_selector(\n                    selector=selector, timeout=timeout, state=state, strict=strict\n                )\n            )\n        )\n\nvenv\\lib\\site-packages\\playwright\\sync_api\\_generated.py:7789: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Page url='https://192.168.150.227:31000/sub-app-dlpparam/dlpFileDocRule'>, coro = <coroutine object Page.wait_for_selector at 0x0000029FFCBFDBC0>\n\n    def _sync(\n        self,\n        coro: Union[Coroutine[Any, Any, Any], Generator[Any, Any, Any]],\n    ) -> Any:\n        __tracebackhide__ = True\n        if self._loop.is_closed():\n            coro.close()\n            raise Error(\"Event loop is closed! Is Playwright already stopped?\")\n    \n        g_self = greenlet.getcurrent()\n        task: asyncio.tasks.Task[Any] = self._loop.create_task(coro)\n        setattr(task, \"__pw_stack__\", inspect.stack())\n        setattr(task, \"__pw_stack_trace__\", traceback.extract_stack())\n    \n        task.add_done_callback(lambda _: g_self.switch())\n        while not task.done():\n            self._dispatcher_fiber.switch()\n        asyncio._set_running_loop(self._loop)\n>       return task.result()\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Page url='https://192.168.150.227:31000/sub-app-dlpparam/dlpFileDocRule'>, selector = '[role=\"dialog\"][aria-label=\"提示\"]', timeout = None, state = None, strict = True\n\n    async def wait_for_selector(\n        self,\n        selector: str,\n        timeout: float = None,\n        state: Literal[\"attached\", \"detached\", \"hidden\", \"visible\"] = None,\n        strict: bool = None,\n    ) -> Optional[ElementHandle]:\n>       return await self._main_frame.wait_for_selector(**locals_to_params(locals()))\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_page.py:373: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Frame name= url='https://192.168.150.227:31000/sub-app-dlpparam/dlpFileDocRule'>, selector = '[role=\"dialog\"][aria-label=\"提示\"]', strict = True, timeout = None, state = None\n\n    async def wait_for_selector(\n        self,\n        selector: str,\n        strict: bool = None,\n        timeout: float = None,\n        state: Literal[\"attached\", \"detached\", \"hidden\", \"visible\"] = None,\n    ) -> Optional[ElementHandle]:\n        return from_nullable_channel(\n>           await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n        )\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_frame.py:323: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Channel object at 0x0000029FFC6FE910>, method = 'waitForSelector', params = {'selector': '[role=\"dialog\"][aria-label=\"提示\"]', 'strict': True}\n\n    async def send(self, method: str, params: Dict = None) -> Any:\n>       return await self._connection.wrap_api_call(\n            lambda: self.inner_send(method, params, False)\n        )\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Connection object at 0x0000029FFC387A30>, cb = <function Channel.send.<locals>.<lambda> at 0x0000029FFCC244C0>, is_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        self._api_zone.set(_extract_stack_trace_information_from_stack(st, is_internal))\n        try:\n>           return await cb()\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:509: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Channel object at 0x0000029FFC6FE910>, method = 'waitForSelector', params = {'selector': '[role=\"dialog\"][aria-label=\"提示\"]', 'strict': True}, return_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        callback = self._connection._send_message_to_server(\n            self._object, method, _filter_none(params)\n        )\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._errors.TimeoutError: Timeout 30000ms exceeded.\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:97: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function step_assert_dialog_msg at 0x0000029FFC0FF550>, request = <FixtureRequest for <Function test_新增关键字规则规则详情中包含中文逗号>>\nkwargs = {'dialog_msg': '该关键字规则中包含中文逗号或特殊字符，请确认是否进行提交？', 'page': <Page url='https://192.168.150.227:31000/sub-app-dlpparam/dlpFileDocRule'>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nG:\\softwares\\Python38\\lib\\site-packages\\_pytest\\fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_cases\\conftest.py:113: in step_assert_dialog_msg\n    CommonPage(page).assert_dialog_msg(dialog_msg)\npages\\common_page.py:101: in assert_dialog_msg\n    ExceptionHandle().handle_exception(e, \"assert\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.base_utils.exception_handle.ExceptionHandle object at 0x0000029FFCC2FDF0>, exception = TimeoutError('Timeout 30000ms exceeded.'), ex_type = 'assert'\n\n        def handle_exception(self, exception, ex_type=\"\"):\n            \"\"\"\n            处理异常信息\n            :param ex_type: 异常类型 assert: 在校验时发生的异常\n            :param exception: 异常信息\n            :return:\n            \"\"\"\n            # 处理异常\n            exception_type = type(exception).__name__\n            if exception_type == \"TimeoutError\":\n                err_msg = f\"\"\"元素定位超时\"\"\"\n            elif exception_type == \"AssertionError\":\n                err_msg = f\"\"\"校验失败\"\"\"\n            else:\n                if re.match(\"Error: strict mode violation:.*resolved to.*elements:\", str(exception)):\n                    err_msg = f\"\"\"定位到多个元素\"\"\"\n                else:\n                    err_msg = f\"\"\"未知异常\"\"\"\n            trac = traceback.format_exc()\n            # 处理allure报告\n            attach_body = f\"\"\"\n    {err_msg}：{exception}\n    详细报错信息如下：\n    {trac}\n    \"\"\"\n            logger.error(trac)\n            # 添加异常信息\n            if ex_type == 'assert':    #校验时出现的异常\n                allure.attach(name=\"测试用例校验失败：\", body=attach_body)\n>               assert False\nE               AssertionError\n\nutils\\base_utils\\exception_handle.py:58: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1718084663887,"stop":1718084663887,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"base_url","time":{"start":1718084663887,"stop":1718084663887,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"pytestconfig","time":{"start":1718084663888,"stop":1718084663888,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"delete_output_dir","time":{"start":1718084663888,"stop":1718084663888,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"playwright","time":{"start":1718084663903,"stop":1718084665601,"duration":1698},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"browser_type_launch_args","time":{"start":1718084665601,"stop":1718084665601,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"browser_type","time":{"start":1718084665601,"stop":1718084665601,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"browser_context_args","time":{"start":1718084665601,"stop":1718084665602,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"browser_context_args","time":{"start":1718084665601,"stop":1718084665601,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"device","time":{"start":1718084665601,"stop":1718084665601,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"browser_type_launch_args","time":{"start":1718084665601,"stop":1718084665601,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"browser_name","time":{"start":1718084665601,"stop":1718084665601,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"context","time":{"start":1718084665602,"stop":1718084679102,"duration":13500},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"page","time":{"start":1718084679102,"stop":1718084679290,"duration":188},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"host","time":{"start":1718084679290,"stop":1718084679291,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"_pytest_bdd_example","time":{"start":1718085222782,"stop":1718085222782,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"testStage":{"description":"E:\\Wondersoft_WebUITest\\test_cases\\features\\bms\\dlp_doc_rules.feature: 新增关键字规则-规则详情中包含中文逗号","status":"failed","statusMessage":"AssertionError","statusTrace":"self = <pages.common_page.CommonPage object at 0x0000029FFCC038E0>, dialog_expect_msg = '该关键字规则中包含中文逗号或特殊字符，请确认是否进行提交？'\n\n    @allure.step(\"校验--弹出对话提示框，显示提示信息：{dialog_expect_msg}\")\n    def assert_dialog_msg(self, dialog_expect_msg=\"\"):\n        \"\"\"\n        校验是否弹出对话提示框，提示框\n        :param dialog_expect_msg: 预期提示信息\n        :return:\n        \"\"\"\n        logger.info(f\"校验是否弹出对话提示框，对话提示框提示信息为：{dialog_expect_msg}，提示信息为空表示不校验提示信息\")\n        try:\n            # 等待提示框出现\n>           dialog_location = self.wait_for_selector('[role=\"dialog\"][aria-label=\"提示\"]')\n\npages\\common_page.py:90: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <pages.common_page.CommonPage object at 0x0000029FFCC038E0>, selector = '[role=\"dialog\"][aria-label=\"提示\"]'\n\n    def wait_for_selector(self, selector: str):\n        \"\"\"\n        等待元素出现\n        :param selector: 元素选择器\n        :return:\n        \"\"\"\n        logger.info(f\"等待元素：{selector}\")\n>       return self.page.wait_for_selector(selector, strict=True)\n\nutils\\ui_utils\\base_page.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Page url='https://192.168.150.227:31000/sub-app-dlpparam/dlpFileDocRule'>, selector = '[role=\"dialog\"][aria-label=\"提示\"]'\n\n    def wait_for_selector(\n        self,\n        selector: str,\n        *,\n        timeout: typing.Optional[float] = None,\n        state: typing.Optional[\n            Literal[\"attached\", \"detached\", \"hidden\", \"visible\"]\n        ] = None,\n        strict: typing.Optional[bool] = None\n    ) -> typing.Optional[\"ElementHandle\"]:\n        \"\"\"Page.wait_for_selector\n    \n        Returns when element specified by selector satisfies `state` option. Returns `null` if waiting for `hidden` or\n        `detached`.\n    \n        **NOTE** Playwright automatically waits for element to be ready before performing an action. Using `Locator`\n        objects and web-first assertions makes the code wait-for-selector-free.\n    \n        Wait for the `selector` to satisfy `state` option (either appear/disappear from dom, or become visible/hidden). If\n        at the moment of calling the method `selector` already satisfies the condition, the method will return immediately.\n        If the selector doesn't satisfy the condition for the `timeout` milliseconds, the function will throw.\n    \n        **Usage**\n    \n        This method works across navigations:\n    \n        ```py\n        from playwright.sync_api import sync_playwright, Playwright\n    \n        def run(playwright: Playwright):\n            chromium = playwright.chromium\n            browser = chromium.launch()\n            page = browser.new_page()\n            for current_url in [\\\"https://google.com\\\", \\\"https://bbc.com\\\"]:\n                page.goto(current_url, wait_until=\\\"domcontentloaded\\\")\n                element = page.wait_for_selector(\\\"img\\\")\n                print(\\\"Loaded image: \\\" + str(element.get_attribute(\\\"src\\\")))\n            browser.close()\n    \n        with sync_playwright() as playwright:\n            run(playwright)\n        ```\n    \n        Parameters\n        ----------\n        selector : str\n            A selector to query for.\n        timeout : Union[float, None]\n            Maximum time in milliseconds. Defaults to `30000` (30 seconds). Pass `0` to disable timeout. The default value can\n            be changed by using the `browser_context.set_default_timeout()` or `page.set_default_timeout()` methods.\n        state : Union[\"attached\", \"detached\", \"hidden\", \"visible\", None]\n            Defaults to `'visible'`. Can be either:\n            - `'attached'` - wait for element to be present in DOM.\n            - `'detached'` - wait for element to not be present in DOM.\n            - `'visible'` - wait for element to have non-empty bounding box and no `visibility:hidden`. Note that element\n              without any content or with `display:none` has an empty bounding box and is not considered visible.\n            - `'hidden'` - wait for element to be either detached from DOM, or have an empty bounding box or\n              `visibility:hidden`. This is opposite to the `'visible'` option.\n        strict : Union[bool, None]\n            When true, the call requires selector to resolve to a single element. If given selector resolves to more than one\n            element, the call throws an exception.\n    \n        Returns\n        -------\n        Union[ElementHandle, None]\n        \"\"\"\n    \n        return mapping.from_impl_nullable(\n>           self._sync(\n                self._impl_obj.wait_for_selector(\n                    selector=selector, timeout=timeout, state=state, strict=strict\n                )\n            )\n        )\n\nvenv\\lib\\site-packages\\playwright\\sync_api\\_generated.py:7789: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Page url='https://192.168.150.227:31000/sub-app-dlpparam/dlpFileDocRule'>, coro = <coroutine object Page.wait_for_selector at 0x0000029FFCBFDBC0>\n\n    def _sync(\n        self,\n        coro: Union[Coroutine[Any, Any, Any], Generator[Any, Any, Any]],\n    ) -> Any:\n        __tracebackhide__ = True\n        if self._loop.is_closed():\n            coro.close()\n            raise Error(\"Event loop is closed! Is Playwright already stopped?\")\n    \n        g_self = greenlet.getcurrent()\n        task: asyncio.tasks.Task[Any] = self._loop.create_task(coro)\n        setattr(task, \"__pw_stack__\", inspect.stack())\n        setattr(task, \"__pw_stack_trace__\", traceback.extract_stack())\n    \n        task.add_done_callback(lambda _: g_self.switch())\n        while not task.done():\n            self._dispatcher_fiber.switch()\n        asyncio._set_running_loop(self._loop)\n>       return task.result()\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_sync_base.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Page url='https://192.168.150.227:31000/sub-app-dlpparam/dlpFileDocRule'>, selector = '[role=\"dialog\"][aria-label=\"提示\"]', timeout = None, state = None, strict = True\n\n    async def wait_for_selector(\n        self,\n        selector: str,\n        timeout: float = None,\n        state: Literal[\"attached\", \"detached\", \"hidden\", \"visible\"] = None,\n        strict: bool = None,\n    ) -> Optional[ElementHandle]:\n>       return await self._main_frame.wait_for_selector(**locals_to_params(locals()))\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_page.py:373: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Frame name= url='https://192.168.150.227:31000/sub-app-dlpparam/dlpFileDocRule'>, selector = '[role=\"dialog\"][aria-label=\"提示\"]', strict = True, timeout = None, state = None\n\n    async def wait_for_selector(\n        self,\n        selector: str,\n        strict: bool = None,\n        timeout: float = None,\n        state: Literal[\"attached\", \"detached\", \"hidden\", \"visible\"] = None,\n    ) -> Optional[ElementHandle]:\n        return from_nullable_channel(\n>           await self._channel.send(\"waitForSelector\", locals_to_params(locals()))\n        )\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_frame.py:323: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Channel object at 0x0000029FFC6FE910>, method = 'waitForSelector', params = {'selector': '[role=\"dialog\"][aria-label=\"提示\"]', 'strict': True}\n\n    async def send(self, method: str, params: Dict = None) -> Any:\n>       return await self._connection.wrap_api_call(\n            lambda: self.inner_send(method, params, False)\n        )\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Connection object at 0x0000029FFC387A30>, cb = <function Channel.send.<locals>.<lambda> at 0x0000029FFCC244C0>, is_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        self._api_zone.set(_extract_stack_trace_information_from_stack(st, is_internal))\n        try:\n>           return await cb()\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:509: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Channel object at 0x0000029FFC6FE910>, method = 'waitForSelector', params = {'selector': '[role=\"dialog\"][aria-label=\"提示\"]', 'strict': True}, return_as_dict = False\n\n    async def inner_send(\n        self, method: str, params: Optional[Dict], return_as_dict: bool\n    ) -> Any:\n        if params is None:\n            params = {}\n        if self._connection._error:\n            error = self._connection._error\n            self._connection._error = None\n            raise error\n        callback = self._connection._send_message_to_server(\n            self._object, method, _filter_none(params)\n        )\n        done, _ = await asyncio.wait(\n            {\n                self._connection._transport.on_error_future,\n                callback.future,\n            },\n            return_when=asyncio.FIRST_COMPLETED,\n        )\n        if not callback.future.done():\n            callback.future.cancel()\n>       result = next(iter(done)).result()\nE       playwright._impl._errors.TimeoutError: Timeout 30000ms exceeded.\n\nvenv\\lib\\site-packages\\playwright\\_impl\\_connection.py:97: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nfixturefunc = <function step_assert_dialog_msg at 0x0000029FFC0FF550>, request = <FixtureRequest for <Function test_新增关键字规则规则详情中包含中文逗号>>\nkwargs = {'dialog_msg': '该关键字规则中包含中文逗号或特殊字符，请确认是否进行提交？', 'page': <Page url='https://192.168.150.227:31000/sub-app-dlpparam/dlpFileDocRule'>}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nG:\\softwares\\Python38\\lib\\site-packages\\_pytest\\fixtures.py:908: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntest_cases\\conftest.py:113: in step_assert_dialog_msg\n    CommonPage(page).assert_dialog_msg(dialog_msg)\npages\\common_page.py:101: in assert_dialog_msg\n    ExceptionHandle().handle_exception(e, \"assert\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <utils.base_utils.exception_handle.ExceptionHandle object at 0x0000029FFCC2FDF0>, exception = TimeoutError('Timeout 30000ms exceeded.'), ex_type = 'assert'\n\n        def handle_exception(self, exception, ex_type=\"\"):\n            \"\"\"\n            处理异常信息\n            :param ex_type: 异常类型 assert: 在校验时发生的异常\n            :param exception: 异常信息\n            :return:\n            \"\"\"\n            # 处理异常\n            exception_type = type(exception).__name__\n            if exception_type == \"TimeoutError\":\n                err_msg = f\"\"\"元素定位超时\"\"\"\n            elif exception_type == \"AssertionError\":\n                err_msg = f\"\"\"校验失败\"\"\"\n            else:\n                if re.match(\"Error: strict mode violation:.*resolved to.*elements:\", str(exception)):\n                    err_msg = f\"\"\"定位到多个元素\"\"\"\n                else:\n                    err_msg = f\"\"\"未知异常\"\"\"\n            trac = traceback.format_exc()\n            # 处理allure报告\n            attach_body = f\"\"\"\n    {err_msg}：{exception}\n    详细报错信息如下：\n    {trac}\n    \"\"\"\n            logger.error(trac)\n            # 添加异常信息\n            if ex_type == 'assert':    #校验时出现的异常\n                allure.attach(name=\"测试用例校验失败：\", body=attach_body)\n>               assert False\nE               AssertionError\n\nutils\\base_utils\\exception_handle.py:58: AssertionError","steps":[{"name":"打开网站：'https://192.168.150.227:31000/'","time":{"start":1718085222784,"stop":1718085223803,"duration":1019},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"url","value":"'https://192.168.150.227:31000/'"}],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"判断是否需要重新登录","time":{"start":1718085223806,"stop":1718085225831,"duration":2025},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"full_url","value":"'https://192.168.150.227:31000/portal-login'"},{"name":"username","value":"'admin'"},{"name":"password","value":"'Ws-123456'"}],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"点击一级菜单：'规则管理'","time":{"start":1718085225834,"stop":1718085226008,"duration":174},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"men","value":"'规则管理'"}],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"点击二级菜单：'基础规则'下的三级菜单：'关键字/正则'","time":{"start":1718085226012,"stop":1718085227077,"duration":1065},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"sec_men","value":"'基础规则'"},{"name":"thi_men","value":"'关键字/正则'"}],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"点击按钮：'新增规则'","time":{"start":1718085227088,"stop":1718085228177,"duration":1089},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"button","value":"'新增规则'"},{"name":"page_name","value":"None"}],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"输入新增规则信息：{'规则类型': '关键字', '规则名称': '明朝万达-包含中文逗号', '规则详情': '明朝，万达'}","time":{"start":1718085228191,"stop":1718085229086,"duration":895},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"dlp_doc_rules_info","value":"{'规则类型': '关键字', '规则名称': '明朝万达-包含中文逗号', '规则详情': '明朝，万达'}"}],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"点击按钮：'确认'","time":{"start":1718085229088,"stop":1718085229171,"duration":83},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"button","value":"'确认'"},{"name":"page_name","value":"'新增规则'"}],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"校验--弹出对话提示框，显示提示信息：'该关键字规则中包含中文逗号或特殊字符，请确认是否进行提交？'","time":{"start":1718085229176,"stop":1718085259198,"duration":30022},"status":"failed","statusMessage":"AssertionError\n","statusTrace":"  File \"G:\\softwares\\Python38\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"E:\\Wondersoft_WebUITest\\pages\\common_page.py\", line 101, in assert_dialog_msg\n    ExceptionHandle().handle_exception(e, \"assert\")\n  File \"E:\\Wondersoft_WebUITest\\utils\\base_utils\\exception_handle.py\", line 58, in handle_exception\n    assert False\n","steps":[],"attachments":[{"uid":"b77bf6702a580e58","name":"测试用例校验失败：","source":"b77bf6702a580e58.attach","type":"text/plain","size":1603}],"parameters":[{"name":"dialog_expect_msg","value":"'该关键字规则中包含中文逗号或特殊字符，请确认是否进行提交？'"}],"stepsCount":0,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true}],"attachments":[],"parameters":[],"stepsCount":8,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[{"name":"page::0","time":{"start":1718085694770,"stop":1718085695052,"duration":282},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"context::0","time":{"start":1718085695055,"stop":1718085708210,"duration":13155},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false},{"name":"playwright::0","time":{"start":1718085708258,"stop":1718085708420,"duration":162},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentsCount":0,"shouldDisplayMessage":false}],"labels":[{"name":"feature","value":"关键字/正则模块"},{"name":"tag","value":"@pytest.mark.usefixtures"},{"name":"parentSuite","value":"test_cases.step_defs.bms"},{"name":"suite","value":"test_13_dlp_doc_rules"},{"name":"host","value":"OFYI7JX9DURTDV6"},{"name":"thread","value":"17360-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.step_defs.bms.test_13_dlp_doc_rules"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":["@pytest.mark.usefixtures"]},"source":"ea3c15a99606fa17.json","parameterValues":[]}